django-admin startproject trafficGui
django-admin startapp displayApp
python manage.py runserver
in trafficGui/settings.py , add the name displayApp in INSTALLED_APPS
in trafficGui/urls.py add
      from django.conf.urls import url
      and

in displayApp/views.py add the def()

in trafficGui/urls.py add
    from displayApp import views, and in urlpatterns, Add
    url('^$', views.index, name='homepage')

create template folder in trafficGui/trafficGui... here , create index.html

in trafficGui/settings , Add
     'DIRS': [os.path.join(BASE_DIR,'template')],

make folder displayApp/static

in trafficGui/settings  , add at the end,
        STATIC_ROOT = os.path.join(BASE_DIR,'static')

in trafficGui/url.py
      url('predictImage', views.predictImage, name='predictImage'),

in displayApp/views.py define predictImage function


in displayApp/views.py
      from django.core.files.storage import FileSystemStorage
      to upload files,
      fileObj = request.FILES['filePath']
      fs = FileSystemStorage()
      fs.save(fileObj.name,fileObj)
      the above saves the uploaded file to the base dir. that's not what we want. we want to save them in a structured way so we can serve them later.

to do that add MEDIA URL in trafficGui/settings


then in trafficGui/urls.py

    from django.conf.urls.static import static
    from django.conf import settings
    and add to urlpatterns
Now images are stored in media directory

now, to display images in html file, in displayApp/views.py
    filePathName =fs.save(fileObj.name,fileObj)
    and path it to the context.
    and add the img tag in index.html with filePathName as file src

create models dir in the trafficGui
copy h5 model in it

in displayApp/views.py .... do import and stuff
and rest of the code in views.py
make the home page index.html
and after picture upload, display indexReload.html
 bootstrap code is in headerPage.html


 <form action="predictVideo" method="post">
  {% csrf_token %}
      <input class="btn btn-secondary" type="submit" value="Start Video">
  </form>


  #To run video
  def predictVideo(request):
      model = load_model('./models/model_trained_b.h5')

  #############################################

  frameWidth= 640         # CAMERA RESOLUTION
  frameHeight = 480
  brightness = 180
  threshold = 0.75         # PROBABLITY THRESHOLD
  font = cv2.FONT_HERSHEY_SIMPLEX
  ##############################################

  # SETUP THE VIDEO CAMERA
  cap = cv2.VideoCapture(0)
  cap.set(3, frameWidth)
  cap.set(4, frameHeight)
  cap.set(10, brightness)



  def grayscale(img):
      img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
      return img
  def equalize(img):
      img =cv2.equalizeHist(img)
      return img
  def preprocessing(img):
      img = grayscale(img)
      img = equalize(img)
      img = img/255
      return img
  def getCalssName(classNo):
      if   classNo == 0: return 'Speed Limit 20 km/h'
      elif classNo == 1: return 'Speed Limit 30 km/h'
      elif classNo == 2: return 'Speed Limit 50 km/h'
      elif classNo == 3: return 'Speed Limit 60 km/h'
      elif classNo == 4: return 'Speed Limit 70 km/h'
      elif classNo == 5: return 'Speed Limit 80 km/h'
      elif classNo == 6: return 'End of Speed Limit 80 km/h'
      elif classNo == 7: return 'Speed Limit 100 km/h'
      elif classNo == 8: return 'Speed Limit 120 km/h'
      elif classNo == 9: return 'No passing'
      elif classNo == 10: return 'No passing for vechiles over 3.5 metric tons'
      elif classNo == 11: return 'Right-of-way at the next intersection'
      elif classNo == 12: return 'Priority road'
      elif classNo == 13: return 'Yield'
      elif classNo == 14: return 'Stop'
      elif classNo == 15: return 'No vechiles'
      elif classNo == 16: return 'Vechiles over 3.5 metric tons prohibited'
      elif classNo == 17: return 'No entry'
      elif classNo == 18: return 'General caution'
      elif classNo == 19: return 'Dangerous curve to the left'
      elif classNo == 20: return 'Dangerous curve to the right'
      elif classNo == 21: return 'Double curve'
      elif classNo == 22: return 'Bumpy road'
      elif classNo == 23: return 'Slippery road'
      elif classNo == 24: return 'Road narrows on the right'
      elif classNo == 25: return 'Road work'
      elif classNo == 26: return 'Traffic signals'
      elif classNo == 27: return 'Pedestrians'
      elif classNo == 28: return 'Children crossing'
      elif classNo == 29: return 'Bicycles crossing'
      elif classNo == 30: return 'Beware of ice/snow'
      elif classNo == 31: return 'Wild animals crossing'
      elif classNo == 32: return 'End of all speed and passing limits'
      elif classNo == 33: return 'Turn right ahead'
      elif classNo == 34: return 'Turn left ahead'
      elif classNo == 35: return 'Ahead only'
      elif classNo == 36: return 'Go straight or right'
      elif classNo == 37: return 'Go straight or left'
      elif classNo == 38: return 'Keep right'
      elif classNo == 39: return 'Keep left'
      elif classNo == 40: return 'Roundabout mandatory'
      elif classNo == 41: return 'End of no passing'
      elif classNo == 42: return 'End of no passing by vechiles over 3.5 metric tons'

  while True:

      # READ IMAGE
      success, imgOrignal = cap.read()

      # PROCESS IMAGE

      img = np.asarray(imgOrignal)
      print('img 1',img.shape)
      img = cv2.resize(img, (32, 32))
      print('img 2',img.shape)
      img = preprocessing(img)
      print('img 3',img.shape)
      cv2.imshow("Processed Image", img)
      img = img.reshape(1, 32, 32, 1)
      print('img 4',img.shape)


      pred = model.predict_classes([img])[0]
      sign = classes[pred+1]
      print(sign)


      cv2.putText(imgOrignal, "CLASS: " , (20, 35), font, 0.75, (0, 0, 255), 2, cv2.LINE_AA)
      cv2.putText(imgOrignal, "PROBABILITY: ", (20, 75), font, 0.75, (0, 0, 255), 2, cv2.LINE_AA)
      # PREDICT IMAGE
      predictions = model.predict(img)
      classIndex = model.predict_classes(img)
      probabilityValue =np.amax(predictions)
      if probabilityValue > threshold:
          #print(getCalssName(classIndex))
          cv2.putText(imgOrignal,str(classIndex)+" "+str(getCalssName(classIndex)), (120, 35), font, 0.75, (0, 0, 255), 2, cv2.LINE_AA)
          cv2.putText(imgOrignal, str(round(probabilityValue*100,2) )+"%", (180, 75), font, 0.75, (0, 0, 255), 2, cv2.LINE_AA)
      cv2.imshow("Result", imgOrignal)

      if cv2.waitKey(1) and 0xFF == ord('q'):
          break
