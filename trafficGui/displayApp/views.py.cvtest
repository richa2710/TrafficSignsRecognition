from django.shortcuts import render
from django.core.files.storage import FileSystemStorage
from tensorflow.keras.models import load_model
from PIL import Image
import pandas as pd
import numpy as np
import cv2

model = load_model('./models/model_trained_b.h5')

#dictionary to label all traffic signs class.
classes = { 1:'Speed limit (20km/h)',
            2:'Speed limit (30km/h)',
            3:'Speed limit (50km/h)',
            4:'Speed limit (60km/h)',
            5:'Speed limit (70km/h)',
            6:'Speed limit (80km/h)',
            7:'End of speed limit (80km/h)',
            8:'Speed limit (100km/h)',
            9:'Speed limit (120km/h)',
           10:'No passing',
           11:'No passing veh over 3.5 tons',
           12:'Right-of-way at intersection',
           13:'Priority road',
           14:'Yield',
           15:'Stop',
           16:'No vehicles',
           17:'Veh > 3.5 tons prohibited',
           18:'No entry',
           19:'General caution',
           20:'Dangerous curve left',
           21:'Dangerous curve right',
           22:'Double curve',
           23:'Bumpy road',
           24:'Slippery road',
           25:'Road narrows on the right',
           26:'Road work',
           27:'Traffic signals',
           28:'Pedestrians',
           29:'Children crossing',
           30:'Bicycles crossing',
           31:'Beware of ice/snow',
           32:'Wild animals crossing',
           33:'End speed + passing limits',
           34:'Turn right ahead',
           35:'Turn left ahead',
           36:'Ahead only',
           37:'Go straight or right',
           38:'Go straight or left',
           39:'Keep right',
           40:'Keep left',
           41:'Roundabout mandatory',
           42:'End of no passing',
           43:'End no passing veh > 3.5 tons' }

# Create your views here.
def index(request):
    context={'a':1}
    return render(request, 'index.html', context)

def actual(fileName):
    df  = pd.read_csv('./models/Test.csv')
    if '_' in fileName:
        fileName = ('Test/'+fileName).split('_')[0]+'.png'
    else:
        fileName = 'Test/'+fileName
    print('fileName in actual, ', fileName)

    actual_sign = df.loc[df['Path']==fileName]['ClassId'].values[0]
    print('actual_sign ', actual_sign )
    actual_sign = classes[int(actual_sign)+1]
    print('actual_sign' ,actual_sign)
    return actual_sign

def predictImage(request):
    fileObj = request.FILES['filePath']
    fs = FileSystemStorage()
    fileName = fs.save(fileObj.name,fileObj)
    filePathName = fs.url(fileName)
    print(filePathName)
    print(fileName)

    def grayscale(img):
        img = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
        return img
    def equalize(img):
        img =cv2.equalizeHist(img)
        return img
    def preprocessing(img):
        img = grayscale(img)
        img = equalize(img)
        img = img/255
        return img
    
    imgOriginal = Image.open('.'+filePathName)
    img = np.asarray(imgOriginal)
    print('img 1',img.shape)
    img = cv2.resize(img, (32, 32))
    print('img 2',img.shape)
    img = preprocessing(img)
    print('img 3',img.shape)
    cv2.imshow("Processed Image", img)
    img = img.reshape(1, 32, 32, 1)
    print('img 4',img.shape)
    
    
    #image = image.resize((30,30))
    #image = np.expand_dims(image, axis=0)
    #image = np.array(image)
    pred = model.predict_classes([img])[0]
    sign = classes[pred+1]
    actual_sign_name = actual(fileName)

    if actual_sign_name==sign:
        text_color='text-success'
    else:
        text_color='text-danger'



    y_test = pd.read_csv('./models/Test.csv')

    labels = y_test["ClassId"].values
    imgs = y_test["Path"].values

    data=[]

    for img in imgs:
        image = Image.open(img)
        image = image.resize((32,32))
        image = preprocessing(image)
        image = image.reshape(1, 32, 32, 1)
        data.append(np.array(image))

        X_test=np.array(data)

        pred = model.predict_classes(X_test)


        print('Total number of images in test dataset =',len(X_test))


    from sklearn.metrics import accuracy_score
    print('Test accuracy =',accuracy_score(labels, pred))


    #Number of correctly and incorrectly identified traffic signs
    index=0
    misclassifiedIndex=[]
    correctlyClassifiedIndex=[]
    for predict,actual in zip(pred,labels):
        if predict!=actual:
            misclassifiedIndex.append(index)
        elif predict==actual:
            correctlyClassifiedIndex.append(index)
        index+=1
    print('Number of incorrectly identified signs = ',len(misclassifiedIndex))
    print('Number of correctly identified signs = ',len(correctlyClassifiedIndex))

    yfile = y_test['Path']
    print('List of incorrectly identified signs:\n',yfile[misclassifiedIndex])

    context={'filePathName':filePathName,'imageFile':fileName,'predictedSign':sign,'actualSign':actual_sign_name,'text_color':text_color}
    return render(request, 'indexReload.html', context)
